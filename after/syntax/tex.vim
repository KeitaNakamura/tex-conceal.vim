if !has('conceal')
  finish
endif

" Original file is https://github.com/wjakob/wjakob.vim/blob/master/after/syntax/tex.vim

" more reasonably sized symbols that were already defined
syn match texMathSymbol '\\Rightarrow\>' contained conceal cchar=‚áí
syn match texMathSymbol '\\Leftarrow\>' contained conceal cchar=‚áê
syn match texMathSymbol '\\rightarrow\>' contained conceal cchar=‚Üí
syn match texMathSymbol '\\leftarrow\>' contained conceal cchar=‚Üê
syn match texMathSymbol '\\emptyset\>' contained conceal cchar=√ò
syn match texMathSymbol '\\varphi\>' contained conceal cchar=œÜ
"syn match texMathSymbol '\\phi\>' contained conceal cchar=Œ¶ " difference with '\Phi' ?
syn match texMathSymbol '\\langle\>\s*' contained conceal cchar=‚ü®
syn match texMathSymbol '\s*\\rangle\>' contained conceal cchar=‚ü©
syn match texMathSymbol '\\\\' contained conceal cchar=‚èé

" logical symbols
syn match texMathSymbol '\\lor\>' contained conceal cchar=‚à®
syn match texMathSymbol '\\land\>' contained conceal cchar=‚àß
syn match texMathSymbol '\\lnot\>' contained conceal cchar=¬¨
syn match texMathSymbol '\\implies\>' contained conceal cchar=‚áí
syn match texMathSymbol '\\impliedby\>' contained conceal cchar=‚áê
syn match texMathSymbol '\\geqslant\>' contained conceal cchar=‚©æ
syn match texMathSymbol '\\leqslant\>' contained conceal cchar=‚©Ω
syn match texMathSymbol '\\frac\s*\%(1\s*2\|{1}{2}\)' contained conceal cchar=¬Ω

" \mathbb characters
syn match texMathSymbol '\\C\>' contained conceal cchar=‚ÑÇ
syn match texMathSymbol '\\N\>' contained conceal cchar=‚Ñï
"syn match texMathSymbol '\\Q\>' contained conceal cchar=‚Ñö
syn match texMathSymbol '\\R\>' contained conceal cchar=‚Ñù
"syn match texMathSymbol '\\Z\>' contained conceal cchar=‚Ñ§

syn match texSpecialChar '\\#' contained conceal cchar=#

syn match texStatement '``' contained conceal cchar=‚Äú
syn match texStatement '\'\'' contained conceal cchar=‚Äù
syn match texStatement '\\item\>' contained conceal cchar=‚Ä¢
syn match texStatement '\\ldots\>' contained conceal cchar=‚Ä¶
syn match texStatement '\\quad\>' contained conceal cchar=  
syn match texStatement '\\qquad\>' contained conceal cchar=    
"syn match texStatement '\\\[' contained conceal cchar=‚ü¶
"syn match texStatement '\\\]' contained conceal cchar=‚üß
syn match texDelimiter '\\{' contained conceal cchar={
syn match texDelimiter '\\}' contained conceal cchar=}
syn match texMathSymbol '\\setminus\>' contained conceal cchar=\
syn match texMathSymbol '\\coloneqq\>' contained conceal cchar=‚âî
syn match texMathSymbol '\\colon\>' contained conceal cchar=:
syn match texMathSymbol '\\:' contained conceal cchar= 
syn match texMathSymbol '\\;' contained conceal cchar= 
syn match texMathSymbol '\\,' contained conceal cchar= 
syn match texMathSymbol '\\ ' contained conceal cchar= 
syn match texMathSymbol '\\quad\>' contained conceal cchar=  
syn match texMathSymbol '\\qquad\>' contained conceal cchar=    
syn match texMathSymbol '\\sqrt\>\s*' contained conceal cchar=‚àö
syn match texMathSymbol '\\\!' contained conceal
syn match texMathSymbol '\\where\>' contained conceal cchar=|
syn match texMathSymbol '\\square\>' contained conceal cchar=‚ñ°
syn match texMathSymbol '\\qedhere\>' contained conceal cchar=‚ñ°

" hide \text delimiter etc inside math mode
if !exists("g:tex_nospell") || !g:tex_nospell
  syn region texMathText matchgroup=texStatement start='\\\%(\%(inter\)\=mathrm\)\s*{'     end='}' concealends keepend contains=@texFoldGroup containedin=texMathMatcher
  syn region texMathText matchgroup=texStatement start='\\\%(\%(inter\)\=text\|mbox\)\s*{' end='}' concealends keepend contains=@texFoldGroup,@Spell containedin=texMathMatcher
else
  syn region texMathText matchgroup=texStatement start='\\\%(\%(inter\)\=text\|mbox\|mathrm\)\s*{' end='}' concealends keepend contains=@texFoldGroup containedin=texMathMatcher
endif

syn region texBoldMathText  matchgroup=texStatement start='\\\%(mathbf\|bm\|symbf\|pmb\|boldsymbol\){' end='}' concealends contains=@texMathZoneGroup containedin=texMathMatcher
syn region texMathOperName  matchgroup=texTypeStyle start='\\\%(operatorname\*\?\|mathop\){'  skip="\\\\\|\\[{}]" end='}'  contained concealends contains=@texMathZoneGroup
syn cluster texMathZoneGroup add=texBoldMathText,texMathOperName

syn region texBoldItalStyle matchgroup=texTypeStyle start="\\emph\s*{" end="}" concealends contains=@texItalGroup
syn region texItalStyle  matchgroup=texTypeStyle start="\\emph\s*{" end="}" concealends contains=@texItalGroup

hi texBoldMathText cterm=bold gui=bold

" set ambiwidth=single

" -> TeX fonts; TODO: spell check @Spell
syn cluster texMathZoneGroup add=texFont,texMathFont
syn cluster texFoldGroup add=texFont
syn cluster texMatchGroup add=texFont
fun s:texFontCharConceal(mathonly,cmd,syncname,patStr,ccharStr)
  if a:mathonly
    exe 'syn region texMathFont matchgroup=texTypeStyle start=+\\'..a:cmd..'\s*{+  skip=+\\\\\|\\[{}]+ end=+}+  contained concealends contains=@texMathZoneGroup,'..a:syncname
  else
    exe 'syn region texFont matchgroup=texTypeStyle start=+\\'..a:cmd..'\s*{+  skip=+\\\\\|\\[{}]+ end=+}+  contained concealends contains='..a:syncname
  endif
  for l:i in range(len(a:patStr))
    exe "syn match "..a:syncname.." '"..a:patStr[l:i].."' contained conceal cchar="..a:ccharStr[byteidx(a:ccharStr,l:i):byteidx(a:ccharStr,l:i+1)-1]
  endfor
endfun
call s:texFontCharConceal(0,'textsc','texFontSmCap','abcdefghijklmnopqrstuvwxyz','·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ Äs·¥õ·¥ú·¥†·¥°x è·¥¢')
call s:texFontCharConceal(1,'mathfrak','texFontFrak','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz','ùîÑùîÖ‚Ñ≠ùîáùîàùîâùîä‚Ñå‚Ñëùîçùîéùîèùîêùîëùîíùîìùîî‚Ñúùîñùîóùîòùîôùîöùîõùîú‚Ñ®ùîûùîüùî†ùî°ùî¢ùî£ùî§ùî•ùî¶ùîßùî®ùî©ùî™ùî´ùî¨ùî≠ùîÆùîØùî∞ùî±ùî≤ùî≥ùî¥ùîµùî∂ùî∑')
call s:texFontCharConceal(1,'math\%(scr\|cal\)','texFontScr','ABCDEFGHIJKLMNOPQRSTUVWXYZ','ùìêùìëùìíùììùìîùìïùìñùìóùìòùìôùìöùìõùìúùìùùìûùìüùì†ùì°ùì¢ùì£ùì§ùì•ùì¶ùìßùì®ùì©')
call s:texFontCharConceal(1,'mathbb','texFontBlackBoard','ABCDEFGHIJKLMNOPQRSTUVWXYZ','ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§')
call s:texFontCharConceal(0,'texttt','texFontTeletype','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz','ùô∞ùô±ùô≤ùô≥ùô¥ùôµùô∂ùô∑ùô∏ùôπùô∫ùôªùôºùôΩùôæùôøùöÄùöÅùöÇùöÉùöÑùöÖùöÜùöáùöàùöâùöäùöãùöåùöçùöéùöèùöêùöëùöíùöìùöîùöïùöñùöóùöòùöôùööùöõùöúùöùùöûùöüùö†ùö°ùö¢ùö£')
call s:texFontCharConceal(1,'mathtt','texFontTeletype','','')
call s:texFontCharConceal(0,'textsf','texFontSansSerif','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz','ùñ†ùñ°ùñ¢ùñ£ùñ§ùñ•ùñ¶ùñßùñ®ùñ©ùñ™ùñ´ùñ¨ùñ≠ùñÆùñØùñ∞ùñ±ùñ≤ùñ≥ùñ¥ùñµùñ∂ùñ∑ùñ∏ùñπùñ∫ùñªùñºùñΩùñæùñøùóÄùóÅùóÇùóÉùóÑùóÖùóÜùóáùóàùóâùóäùóãùóåùóçùóéùóèùóêùóëùóíùóì')
call s:texFontCharConceal(1,'mathsf','texFontSansSerif','','')

" -> super/sub-scripts
let s:tex_superscripts='[0-9a-pr-zABDEG-PRTUW() \-=+,./<>]'
let s:tex_subscripts='[0-9aeh-pr-vx() \-=+.,/]'
"let s:tex_subscripts=exists("g:tex_subscripts")?g:tex_subscripts:'[0-9aeh-pr-vx() \-=+,/]'
fun s:SuperSubChar(leader,patStr,ccharStr)
  if a:leader=='\^'
    let l:group='texSuperscript'
  elseif a:leader=='_'
    let l:group='texSubscript'
  endif
  for l:i in range(len(a:patStr))
    let l:cchar=a:ccharStr[byteidx(a:ccharStr,l:i):byteidx(a:ccharStr,l:i+1)-1]
    exe "syn match "..l:group.." '"..a:leader..a:patStr[l:i].."' contained conceal cchar="..l:cchar
    exe "syn match "..l:group.."s '"..a:patStr[l:i].."' contained conceal cchar="..l:cchar
  endfor
endfun
let s:SuperCmdList = []
let s:SubCmdList = []
fun s:SuperSubCmd(leader,cmd,cchar)
  if a:leader=='\^'
    let l:group='Super'
  elseif a:leader=='_'
    let l:group='Sub'
  endif
  call add({"s:"..l:group.."CmdList"}, a:cmd)
  exe 'syn match tex'..l:group..'script "'..a:leader..'\\'..a:cmd..'\>" contained conceal cchar='..a:cchar
  exe 'syn match tex'..l:group..'scripts "\\'..a:cmd..'\>" contained conceal cchar='..a:cchar
endfun

call s:SuperSubChar('\^','0123456789abcdefghijklmnoprstuvwxyzABDEGHIJKLMNOPRTUW+-<>/()=','‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ·µÉ·µá·∂ú·µà·µâ·∂†·µç ∞‚Å± ≤·µèÀ°·µê‚Åø·µí·µñ ≥À¢·µó·µò·µõ ∑À£ ∏·∂ª·¥¨·¥Æ·¥∞·¥±·¥≥·¥¥·¥µ·¥∂·¥∑·¥∏·¥π·¥∫·¥º·¥æ·¥ø·µÄ·µÅ·µÇ‚Å∫‚ÅªÀÇÀÉÀä‚ÅΩ‚ÅæÀ≠')
syn match texSuperscript '\^\.' contained conceal cchar=Àô
syn match texSuperscripts '\.' contained conceal cchar=Àô
call s:SuperSubCmd('\^','vee','·µõ')
call s:SuperSubCmd('\^','top','·µÄ')
call s:SuperSubCmd('\^','ast\|star\|times','Àü')
call s:SuperSubCmd('\^','alpha','·µÖ')
call s:SuperSubCmd('\^','beta','·µù')
call s:SuperSubCmd('\^','gamma','·µû')
call s:SuperSubCmd('\^','delta','·µü')
call s:SuperSubCmd('\^','epsilon','·µã')
call s:SuperSubCmd('\^','theta','·∂ø')
call s:SuperSubCmd('\^','iota','·∂•')
call s:SuperSubCmd('\^','Phi','·∂≤')
call s:SuperSubCmd('\^','varphi','·µ†')
call s:SuperSubCmd('\^','chi','·µ°')
"call s:SuperSubCmd('\^','nu','·µõ')
exe 'syn match texSuperscript "\^{\%('..s:tex_superscripts..'\|\\\%('..join(s:SuperCmdList,'\|')..'\)\>\)\+}" contained conceal contains=texSuperscripts'

syn match texMathSymbol '\^\%(\\math\%(rm\|sf\){\s*-\?T\s*}\|{\s*-\?\s*\\math\%(rm\|sf\){\s*-\?T\s*}\s*}\)' contained conceal contains=texSuperscripts,texStatement
exe 'syn match texMathSymbol "\^\%(\\\%(text\|mathrm\|mbox\){'..s:tex_superscripts..'\+}\|{\s*\\\%(text\|mathrm\|mbox\){'..s:tex_superscripts..'\+}\s*}\)" contained conceal contains=texSuperscripts,texStatement'

call s:SuperSubChar('_','0123456789aehijklmnoprstuvx+-/()=,','‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Çê‚Çë‚Çï·µ¢‚±º‚Çñ‚Çó‚Çò‚Çô‚Çí‚Çö·µ£‚Çõ‚Çú·µ§·µ•‚Çì‚Çä‚ÇãÀè‚Çç‚Çé‚Çå,')
syn match texSubscript '_\.' contained conceal cchar=.
syn match texSubscripts '\.' contained conceal cchar=.
call s:SuperSubCmd('_','beta','·µ¶')
call s:SuperSubCmd('_','delta','·µ®')
call s:SuperSubCmd('_','phi','·µ©')
call s:SuperSubCmd('_','gamma','·µß')
call s:SuperSubCmd('_','chi','·µ™')
"call s:SuperSubCmd('_','nu','·µ•')
exe 'syn match texSubscript "_{\%('..s:tex_subscripts..'\|\\\%('..join(s:SubCmdList,'\|')..'\)\>\)\+}" contained conceal contains=texSubscripts'
exe 'syn match texMathSymbol "_\%(\\\%(text\|mathrm\|mbox\){'..s:tex_subscripts..'\+}\|{\s*\\\%(text\|mathrm\|mbox\){'..s:tex_subscripts..'\+}\s*}\)" contained conceal contains=texSubscripts,texStatement'
